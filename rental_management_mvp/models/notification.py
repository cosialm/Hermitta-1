from enum import Enum
from datetime import datetime
from typing import Optional

# Using NotificationTemplateType from notification_template.py for consistency in type names
# from .notification_template import NotificationTemplateType
# Using NotificationDeliveryMethod from notification_template.py
# from .notification_template import NotificationDeliveryMethod

# For now, defining them here if not accessible, but ideally they'd be shared or imported.
class NotificationType(Enum): # Renaming from NotificationTemplateType for clarity in this model's context
    RENT_REMINDER = "RENT_REMINDER"
    LATE_RENT_WARNING = "LATE_RENT_WARNING"
    PAYMENT_CONFIRMATION = "PAYMENT_CONFIRMATION"
    PAYMENT_FAILED = "PAYMENT_FAILED"
    NEW_MESSAGE_ALERT = "NEW_MESSAGE_ALERT"
    LEASE_UPDATE_ALERT = "LEASE_UPDATE_ALERT"
    MAINTENANCE_STATUS_UPDATE = "MAINTENANCE_STATUS_UPDATE"
    NEW_DOCUMENT_UPLOADED = "NEW_DOCUMENT_UPLOADED"
    # Add other types as needed

class NotificationDeliveryMethod(Enum):
    EMAIL = "EMAIL"
    SMS = "SMS"
    IN_APP = "IN_APP"

class NotificationStatus(Enum):
    SCHEDULED = "SCHEDULED"             # Notification is scheduled for future sending
    PENDING_SEND = "PENDING_SEND"       # Queued for immediate sending by the notification dispatcher
    SENT_SUCCESS = "SENT_SUCCESS"       # Successfully dispatched to the gateway (e.g., email server, SMS provider)
    SENT_FAIL = "SENT_FAIL"             # Failed to dispatch to the gateway
    DELIVERY_CONFIRMED = "DELIVERY_CONFIRMED" # Gateway confirmed delivery to recipient's device/server (if supported)
    DELIVERY_FAILED = "DELIVERY_FAILED"   # Gateway confirmed failure to deliver
    READ = "READ"                       # User has marked the notification as read (primarily for IN_APP)
    CANCELLED = "CANCELLED"             # Scheduled notification was cancelled before sending

class Notification:
    def __init__(self,
                 notification_id: int,
                 user_id: int, # Recipient User ID
                 type: NotificationType,
                 delivery_method: NotificationDeliveryMethod,
                 content: Optional[str] = None, # Generated content, might be null if using template + context at send time
                 template_id: Optional[int] = None, # FK to NotificationTemplate, if generated from template
                 template_context: Optional[dict] = None, # JSON data for filling template placeholders if content not pre-generated
                 status: NotificationStatus = NotificationStatus.SCHEDULED, # Default to scheduled or pending
                 scheduled_send_time: Optional[datetime] = None, # For prescheduled reminders/notifications
                 sent_at: Optional[datetime] = None, # Actual time it was dispatched
                 delivered_at: Optional[datetime] = None, # Actual time delivery was confirmed
                 read_at: Optional[datetime] = None, # For IN_APP notifications
                 lease_id: Optional[int] = None, # FK to Lease, if related to a lease (e.g. rent reminders)
                 reminder_rule_id: Optional[int] = None, # FK to LandlordReminderRule, if generated by a rule
                 related_entity_type: Optional[str] = None, # e.g., 'PAYMENT', 'MESSAGE', 'DOCUMENT'
                 related_entity_id: Optional[int] = None,   # ID of the related entity
                 error_message: Optional[str] = None, # If status is SENT_FAIL or DELIVERY_FAILED
                 created_at: datetime = datetime.utcnow(),
                 updated_at: datetime = datetime.utcnow()):

        self.notification_id = notification_id
        self.user_id = user_id
        self.type = type
        self.delivery_method = delivery_method

        self.content = content # This could be pre-generated, or generated at send time from template
        self.template_id = template_id
        self.template_context = template_context

        self.status = status
        self.scheduled_send_time = scheduled_send_time
        self.sent_at = sent_at
        self.delivered_at = delivered_at
        self.read_at = read_at

        self.lease_id = lease_id
        self.reminder_rule_id = reminder_rule_id
        self.related_entity_type = related_entity_type
        self.related_entity_id = related_entity_id
        self.error_message = error_message

        self.created_at = created_at
        self.updated_at = updated_at

# Example usage:
# scheduled_reminder = Notification(
#     notification_id=1, user_id=201, type=NotificationType.RENT_REMINDER,
#     delivery_method=NotificationDeliveryMethod.SMS,
#     template_id=1, # Link to the SMS rent reminder template
#     template_context={"tenant_name": "John Doe", "rent_amount": "30000", "due_date": "2024-09-01"},
#     scheduled_send_time=datetime(2024, 8, 25, 9, 0, 0), # Send on Aug 25th, 9 AM
#     status=NotificationStatus.SCHEDULED,
#     lease_id=101, reminder_rule_id=5
# )
# print(scheduled_reminder.type, scheduled_reminder.status, scheduled_reminder.scheduled_send_time)
