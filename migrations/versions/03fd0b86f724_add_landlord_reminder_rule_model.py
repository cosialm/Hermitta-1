"""add landlord reminder rule model

Revision ID: 03fd0b86f724
Revises: 9563c90ba323
Create Date: 2025-06-21 03:50:51.865749

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '03fd0b86f724'
down_revision = '9563c90ba323'
branch_labels = None
depends_on = None

# Define SA Enums based on models.enums
reminder_rule_event_enum = sa.Enum(
    'RENT_DUE_DATE', 'LEASE_START_DATE', 'LEASE_END_DATE',
    'INVOICE_DUE_DATE', 'DOCUMENT_EXPIRY_DATE', 'MAINTENANCE_SCHEDULED_DATE',
    name='reminderruleevent'
)
reminder_recipient_type_enum = sa.Enum(
    'TENANT', 'LANDLORD', 'PROPERTY_MANAGER', 'OTHER_USER', 'CUSTOM_EMAIL',
    name='reminderrecipienttype'
)
reminder_time_unit_enum = sa.Enum(
    'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS',
    name='remindertimeunit'
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('landlord_reminder_rules',
    sa.Column('rule_id', sa.Integer(), nullable=False),
    sa.Column('landlord_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('event_type', reminder_rule_event_enum, nullable=False),
    sa.Column('offset_value', sa.Integer(), nullable=False),
    sa.Column('offset_unit', reminder_time_unit_enum, nullable=False),
    sa.Column('send_time', sa.Time(), nullable=False),
    sa.Column('recipient_type', reminder_recipient_type_enum, nullable=False),
    sa.Column('specific_recipient_user_id', sa.Integer(), nullable=True),
    sa.Column('custom_recipient_email', sa.String(length=255), nullable=True),
    sa.Column('notification_template_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['landlord_id'], ['users.user_id'], name=op.f('fk_landlord_reminder_rules_landlord_id_users')),
    sa.ForeignKeyConstraint(['notification_template_id'], ['notification_templates.template_id'], name=op.f('fk_landlord_reminder_rules_notification_template_id_notification_templates')),
    sa.ForeignKeyConstraint(['specific_recipient_user_id'], ['users.user_id'], name=op.f('fk_landlord_reminder_rules_specific_recipient_user_id_users')),
    sa.PrimaryKeyConstraint('rule_id', name=op.f('pk_landlord_reminder_rules'))
    )
    op.create_index(op.f('ix_landlord_reminder_rules_event_type'), 'landlord_reminder_rules', ['event_type'], unique=False)
    op.create_index(op.f('ix_landlord_reminder_rules_is_active'), 'landlord_reminder_rules', ['is_active'], unique=False)
    op.create_index(op.f('ix_landlord_reminder_rules_landlord_id'), 'landlord_reminder_rules', ['landlord_id'], unique=False)
    op.create_index(op.f('ix_landlord_reminder_rules_notification_template_id'), 'landlord_reminder_rules', ['notification_template_id'], unique=False)
    op.create_index(op.f('ix_landlord_reminder_rules_specific_recipient_user_id'), 'landlord_reminder_rules', ['specific_recipient_user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_landlord_reminder_rules_specific_recipient_user_id'), table_name='landlord_reminder_rules')
    op.drop_index(op.f('ix_landlord_reminder_rules_notification_template_id'), table_name='landlord_reminder_rules')
    op.drop_index(op.f('ix_landlord_reminder_rules_landlord_id'), table_name='landlord_reminder_rules')
    op.drop_index(op.f('ix_landlord_reminder_rules_is_active'), table_name='landlord_reminder_rules')
    op.drop_index(op.f('ix_landlord_reminder_rules_event_type'), table_name='landlord_reminder_rules')
    op.drop_table('landlord_reminder_rules')

    # Drop Enums (PostgreSQL specific, adjust for other DBs)
    # Commenting out for SQLite compatibility
    # reminder_rule_event_enum.drop(op.get_bind(), checkfirst=False)
    # reminder_recipient_type_enum.drop(op.get_bind(), checkfirst=False)
    # reminder_time_unit_enum.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
